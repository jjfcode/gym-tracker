name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CACHE_KEY: node-modules

jobs:
  # Quality checks job
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'gym-tracker-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./gym-tracker-app
        run: npm ci
        
      - name: Type checking
        working-directory: ./gym-tracker-app
        run: npm run type-check
        
      - name: Linting
        working-directory: ./gym-tracker-app
        run: npm run lint
        
      - name: Format checking
        working-directory: ./gym-tracker-app
        run: npm run format:check
        
      - name: Unit tests
        working-directory: ./gym-tracker-app
        run: npm run test
        
      - name: Security audit
        working-directory: ./gym-tracker-app
        run: npm run security:audit
        continue-on-error: true

  # Build job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'gym-tracker-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./gym-tracker-app
        run: npm ci
        
      - name: Build application
        working-directory: ./gym-tracker-app
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_APP_ENV: production
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: gym-tracker-app/dist/
          retention-days: 7

  # E2E testing job
  e2e:
    name: E2E Testing
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'gym-tracker-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./gym-tracker-app
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: ./gym-tracker-app
        run: npx playwright install --with-deps
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: gym-tracker-app/dist/
          
      - name: Run E2E tests
        working-directory: ./gym-tracker-app
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        run: npm run test:e2e
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: gym-tracker-app/test-results/
          retention-days: 7

  # Performance testing job
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'gym-tracker-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./gym-tracker-app
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: gym-tracker-app/dist/
          
      - name: Run Lighthouse CI
        working-directory: ./gym-tracker-app
        run: npm run lighthouse
        
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: gym-tracker-app/.lighthouseci/
          retention-days: 7

  # Security testing job
  security:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'gym-tracker-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./gym-tracker-app
        run: npm ci
        
      - name: Run security assessment
        working-directory: ./gym-tracker-app
        run: npm run security:full

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e, performance, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: gym-tracker-app/dist/
          
      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./gym-tracker-app
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e, performance, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: gym-tracker-app/dist/
          
      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./gym-tracker-app
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false